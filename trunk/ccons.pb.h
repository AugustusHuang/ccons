// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_ccons_2eproto__INCLUDED
#define PROTOBUF_ccons_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2000003
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2000003 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

namespace ccons {

// Internal implementation detail -- do not call these.
void  protobuf_BuildDesc_ccons_2eproto();
void protobuf_BuildDesc_ccons_2eproto_AssignGlobalDescriptors(
    ::google::protobuf::FileDescriptor* file);

class ConsoleOutput;

// ===================================================================

class ConsoleOutput : public ::google::protobuf::Message {
 public:
  ConsoleOutput();
  virtual ~ConsoleOutput();
  
  ConsoleOutput(const ConsoleOutput& from);
  
  inline ConsoleOutput& operator=(const ConsoleOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsoleOutput& default_instance();
  void Swap(ConsoleOutput* other);
  
  // implements Message ----------------------------------------------
  
  ConsoleOutput* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string output = 1;
  inline bool has_output() const;
  inline void clear_output();
  inline const ::std::string& output() const;
  inline void set_output(const ::std::string& value);
  inline void set_output(const char* value);
  inline ::std::string* mutable_output();
  
  // required string prompt = 2;
  inline bool has_prompt() const;
  inline void clear_prompt();
  inline const ::std::string& prompt() const;
  inline void set_prompt(const ::std::string& value);
  inline void set_prompt(const char* value);
  inline ::std::string* mutable_prompt();
  
  // required string input = 3;
  inline bool has_input() const;
  inline void clear_input();
  inline const ::std::string& input() const;
  inline void set_input(const ::std::string& value);
  inline void set_input(const char* value);
  inline ::std::string* mutable_input();
  
  // required string error_output = 4;
  inline bool has_error_output() const;
  inline void clear_error_output();
  inline const ::std::string& error_output() const;
  inline void set_error_output(const ::std::string& value);
  inline void set_error_output(const char* value);
  inline ::std::string* mutable_error_output();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* output_;
  static const ::std::string _default_output_;
  ::std::string* prompt_;
  static const ::std::string _default_prompt_;
  ::std::string* input_;
  static const ::std::string _default_input_;
  ::std::string* error_output_;
  static const ::std::string _default_error_output_;
  friend void protobuf_BuildDesc_ccons_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ConsoleOutput* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// ConsoleOutput

// required string output = 1;
inline bool ConsoleOutput::has_output() const {
  return _has_bit(0);
}
inline void ConsoleOutput::clear_output() {
  if (output_ != &_default_output_) {
    output_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& ConsoleOutput::output() const {
  return *output_;
}
inline void ConsoleOutput::set_output(const ::std::string& value) {
  _set_bit(0);
  if (output_ == &_default_output_) {
    output_ = new ::std::string;
  }
  output_->assign(value);
}
inline void ConsoleOutput::set_output(const char* value) {
  _set_bit(0);
  if (output_ == &_default_output_) {
    output_ = new ::std::string;
  }
  output_->assign(value);
}
inline ::std::string* ConsoleOutput::mutable_output() {
  _set_bit(0);
  if (output_ == &_default_output_) {
    output_ = new ::std::string;
  }
  return output_;
}

// required string prompt = 2;
inline bool ConsoleOutput::has_prompt() const {
  return _has_bit(1);
}
inline void ConsoleOutput::clear_prompt() {
  if (prompt_ != &_default_prompt_) {
    prompt_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& ConsoleOutput::prompt() const {
  return *prompt_;
}
inline void ConsoleOutput::set_prompt(const ::std::string& value) {
  _set_bit(1);
  if (prompt_ == &_default_prompt_) {
    prompt_ = new ::std::string;
  }
  prompt_->assign(value);
}
inline void ConsoleOutput::set_prompt(const char* value) {
  _set_bit(1);
  if (prompt_ == &_default_prompt_) {
    prompt_ = new ::std::string;
  }
  prompt_->assign(value);
}
inline ::std::string* ConsoleOutput::mutable_prompt() {
  _set_bit(1);
  if (prompt_ == &_default_prompt_) {
    prompt_ = new ::std::string;
  }
  return prompt_;
}

// required string input = 3;
inline bool ConsoleOutput::has_input() const {
  return _has_bit(2);
}
inline void ConsoleOutput::clear_input() {
  if (input_ != &_default_input_) {
    input_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& ConsoleOutput::input() const {
  return *input_;
}
inline void ConsoleOutput::set_input(const ::std::string& value) {
  _set_bit(2);
  if (input_ == &_default_input_) {
    input_ = new ::std::string;
  }
  input_->assign(value);
}
inline void ConsoleOutput::set_input(const char* value) {
  _set_bit(2);
  if (input_ == &_default_input_) {
    input_ = new ::std::string;
  }
  input_->assign(value);
}
inline ::std::string* ConsoleOutput::mutable_input() {
  _set_bit(2);
  if (input_ == &_default_input_) {
    input_ = new ::std::string;
  }
  return input_;
}

// required string error_output = 4;
inline bool ConsoleOutput::has_error_output() const {
  return _has_bit(3);
}
inline void ConsoleOutput::clear_error_output() {
  if (error_output_ != &_default_error_output_) {
    error_output_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& ConsoleOutput::error_output() const {
  return *error_output_;
}
inline void ConsoleOutput::set_error_output(const ::std::string& value) {
  _set_bit(3);
  if (error_output_ == &_default_error_output_) {
    error_output_ = new ::std::string;
  }
  error_output_->assign(value);
}
inline void ConsoleOutput::set_error_output(const char* value) {
  _set_bit(3);
  if (error_output_ == &_default_error_output_) {
    error_output_ = new ::std::string;
  }
  error_output_->assign(value);
}
inline ::std::string* ConsoleOutput::mutable_error_output() {
  _set_bit(3);
  if (error_output_ == &_default_error_output_) {
    error_output_ = new ::std::string;
  }
  return error_output_;
}


}  // namespace ccons
#endif  // PROTOBUF_ccons_2eproto__INCLUDED
